Evaluating Impacts of Climate Change on Traditional Mexican Maize
========================================================
author: Steven C. Gonzalez
date: December 6th, 2017
autosize: true
Presented to:<br />
Advsior - Dr. Russell Weaver<br />
Committee Members - <br />

```{r,echo=FALSE} 

# establish directories
root<-"E:\\thesis"
setwd(root)

# new directories for biomod


# dir_bmz<-paste0(dir_R,"/02_biomodez")


dir_dat<-paste0(root,"/01_data")
dir_R<-paste0(root,"/02_R")
dir_out<-paste0(root,"/03_output")
dir_figs<-paste0(root,"/04_figs")
dir_lit<-paste0(root,"/05_lit")
dir_comp<-paste0(root,"/06_comp")
dir_presentations<-paste0(root,"/07_pres")

dir_maices<-paste0(dir_dat,"/maices")
dir_ind<-paste0(dir_dat,"/ind")
dir_bm<-paste0(dir_R,"/00_biomod")
dir_topo<-paste0(dir_dat,"/topo")

# 
dir_clim<-paste0(dir_dat,"/clim")
dir_pres<-paste0(dir_clim,"/present")
dir_fut<-paste0(dir_clim,"/future")

dir_p.mosaics<-paste0(dir_pres,"/2.0/")
dir_f.mosaics<-paste0(dir_fut,"/1.4/")

dir_stacks<-paste0(dir_clim,"/stacks/")

```


Introduction
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet2 
- Bullet 3

Slide With Code
========================================================


```{r packages, echo=FALSE}
Install_And_Load <- function(Required_Packages)
{
  Remaining_Packages <- Required_Packages[!(Required_Packages %in% installed.packages()[,"Package"])];
  
  if(length(Remaining_Packages)) 
  {
    install.packages(Remaining_Packages, repos='http://cran.us.r-project.org');
  }
  for(package_name in Required_Packages)
  {
    library(package_name,character.only=TRUE,quietly=TRUE);
  }
}
# install and load required packages
requiredPackages<-(c("shiny",
                     "leaflet",
                     "plyr",
                     "dplyr",
                     "grid",
                     "vcd",
                     "plotly",
                     "tidyr",
                     "ggplot2",
                     "googleVis",
                     "RColorBrewer",
                     "knitr",
                     "igraph",
                     "ggplot2movies"
                   ))



Install_And_Load(requiredPackages)
```

```{r shinyglobal,echo=FALSE}
# https://github.com/CONABIO/Conabio-PGMaices

# 

#For PC
setwd(paste0(dir_R,"/Conabio-PGMaices-master"))

#For Mac
#setwd("~/Dropbox/JANO/2016/Conabio/Github/shiny_maiz/")

#TableP<-read.table("~/Dropbox/JANO/2016/Conabio/Github/shiny_maiz/RawData.txt", head=T, sep="\t")
#dir()
#getwd()
#dir('./image')
TableP <- read.csv("RawData.csv", head = T, sep = ",")
#str(TableP)
names(TableP)
levels(TableP$Complejo_racial)
names(TableP)
TableP$Longitud
head(TableP)
dim(TableP)
names(TableP)
TableP$Estado
TTabla <- TableP %>%
  filter(!is.na(Raza_primaria)) %>%
  filter(!is.na(Latitud)) %>%
  filter(Estado != "ND")

levels(TTabla$Estado)
dim(TTabla)
names(TTabla)
TTabla$Anhio_Colecta <- as.factor(TTabla$Anhio_Colecta)
#TTabla[Tabla$Estado=="ND",]
str(TTabla)

levels(TTabla$Anhio_Colecta)
levels(TTabla$Estado)
levels(TTabla$Complejo_racial)
levels(TTabla$Raza_primaria)


names(TTabla)
TTabla <- TTabla %>%
  mutate(Estado = revalue(Estado,c("AGUASCALIENTES" = "AGS"))) %>%
  mutate(Estado = revalue(Estado,c("BAJA CALIFORNIA" = "BC"))) %>%
  mutate(Estado = revalue(Estado,c("BAJA CALIFORNIA SUR" = "BCS"))) %>%
  mutate(Estado = revalue(Estado,c("CAMPECHE" = "CAMP"))) %>%
  mutate(Estado = revalue(Estado,c("CHIAPAS" = "CHPS"))) %>%
  mutate(Estado = revalue(Estado,c("CHIHUAHUA" = "CHIH"))) %>%
  mutate(Estado = revalue(Estado,c("COAHUILA DE ZARAGOZA" = "COAH"))) %>%
  mutate(Estado = revalue(Estado,c("COLIMA" = "COL"))) %>%
  mutate(Estado = revalue(Estado,c("DISTRITO FEDERAL" = "CDMX"))) %>%
  mutate(Estado = revalue(Estado,c("DURANGO" = "DGO"))) %>%
  mutate(Estado = revalue(Estado,c("ESTADO DE MÉXICO" = "MEX"))) %>%
  mutate(Estado = revalue(Estado,c("GUANAJUATO" = "GTO"))) %>%
  mutate(Estado = revalue(Estado,c("GUERRERO" = "GRO"))) %>%
  mutate(Estado = revalue(Estado,c("HIDALGO" = "HGO"))) %>%
  mutate(Estado = revalue(Estado,c("JALISCO" = "JAL"))) %>%
  mutate(Estado = revalue(Estado,c("MICHOACÁN DE OCAMPO" = "MICH"))) %>%
  mutate(Estado = revalue(Estado,c("MORELOS" = "MOR"))) %>%
  mutate(Estado = revalue(Estado,c("NAYARIT" = "NAY"))) %>%
  mutate(Estado = revalue(Estado,c("NUEVO LEÓN" = "NL"))) %>%
  mutate(Estado = revalue(Estado,c("OAXACA" = "OAX"))) %>%
  mutate(Estado = revalue(Estado,c("PUEBLA" = "PUE"))) %>%
  mutate(Estado = revalue(Estado,c("QUERÉTARO DE ARTEAGA" = "QRO"))) %>%
  mutate(Estado = revalue(Estado,c("QUINTANA ROO" = "QROO"))) %>%
  mutate(Estado = revalue(Estado,c("SAN LUIS POTOSÍ" = "SLP"))) %>%
  mutate(Estado = revalue(Estado,c("SINALOA" = "SIN"))) %>%
  mutate(Estado = revalue(Estado,c("SONORA" = "SON"))) %>%
  mutate(Estado = revalue(Estado,c("TABASCO" = "TAB"))) %>%
  mutate(Estado = revalue(Estado,c("TAMAULIPAS" = "TAM"))) %>%
  mutate(Estado = revalue(Estado,c("TLAXCALA" = "TLAX"))) %>%
  mutate(Estado = revalue(Estado,c("VERACRUZ DE IGNACIO DE LA LLAVE" = "VER"))) %>%
  mutate(Estado = revalue(Estado,c("YUCATÁN" = "YUC"))) %>%
  mutate(Estado = revalue(Estado,c("ZACATECAS" = "ZAC"))) %>%
  mutate(Complejo_racial = revalue(Complejo_racial,c("Chapalote" = "Chapalotes"))) %>%
  mutate(Complejo_racial = revalue(Complejo_racial,c("Cónico" = "Cónicos"))) %>%
  mutate(Complejo_racial = revalue(Complejo_racial,c("Dentados_tropicales" = "Dentados tropicales"))) %>%
  mutate(Raza_primaria = revalue(Raza_primaria,c("Palomero Toluquenho" = "Palomero Toluqueño")))

#  mutate(Complejo_racial = revalue(Complejo_racial,c("Dentados_tropicales" = "Den_Trop"))) %>%
#  mutate(Complejo_racial = revalue(Complejo_racial,c("Ocho hileras" = "8_Hileras"))) %>%
#  mutate(Complejo_racial = revalue(Complejo_racial,c("Sierra Chihuahua" = "S_Chih"))) %>%
#  mutate(Complejo_racial = revalue(Complejo_racial,c("Tropicales precoces" = "Trop_Prec"))) %>%
#  mutate(Complejo_racial = revalue(Complejo_racial,c("Tropicales tardíos" = "Trop_Tar")))

levels(TTabla$Estado)
levels(TTabla$Complejo_racial)

names(TTabla)[11] <- c("longitude")
names(TTabla)[12] <- c("latitude")

dim(TTabla)
nrow(TTabla)

#Ventana 1 Mapa
TableL <- TTabla

#Ventana 2 Foto y Cleveland Plot
TableL1 <- TTabla[,c(1:10,74:79)]
Val1 <- rep(1, nrow(TableL1))
TableL1 <- data.frame(TableL1, Val1)
rm(Val1)
names(TableL1)[3] <- c("Raza_Primaria")
names(TableL1)

attach(TableL1)
TableL1a <- aggregate(TableL1[,10:16], by = list(Raza_Primaria,Estado), FUN = mean, na.rm = T)
TableL1b <- aggregate(TableL1[,17], by = list(Raza_Primaria,Estado), FUN = sum, na.rm = T)

detach(TableL1)

TableL1c <- data.frame(TableL1a,TableL1b[,3])
names(TableL1c)[1] <- c("Raza_Primaria")
names(TableL1c)[2] <- c("Estado")
names(TableL1c)[10] <- c("Val1")
head(TableL1c)


#Ventana 3 StrucPlot
Val1 <- rep(1, nrow(TTabla))
TableLL <- data.frame(TTabla, Val1)
names(TableLL)
rm(Val1)
TableLL <- TableLL[,c(3,4,6,7,95)]

#names(TableLL)
#dim(TableLL)
#head(TableLL)

#For MosaicPlot
#TTabla2 <- TableLL %>%
#  filter(Estado == "AGS")
##attach(TTabla)

#Tabla1 <- xtabs(TTabla2$Val1~TTabla2$Raza_primaria + TTabla2$Complejo_racial)
#Tabla1
#detach(TTabla)

#Tabla4 <- Tabla1[apply(Tabla1,1,sum) > 0,apply(Tabla1,2,sum) > 0]
#assoc(Tabla4, gp = shading_hsv, labeling_args = list(rot_labels = c(left = 0, bottom = 270,right = 0), abbreviate = c(variable = TRUE)), zero_size = 0, main = "Mexico")


#Ventana 2.1 Sankey plot

names(TableL)
Val1 <- rep(1, nrow(TableL))
TableL1 <- data.frame(TableL,Val1)
rm(Val1)
#levels(TableL$Complejo_racial)
#head(TableL1)
#Zodiac <- paste(TableL1[,4],TableL1[,3], sep = ";")

#levels(TableL1$Complejo_racial)
#TableL12 <- TableL1 %>%
#  filter(Complejo_racial == "Chapalotes")
#dim(TableL12)
#na.omit(TableL12)

TableL2 <- TableL1[,c(3,4,7,95)]
dim(TableL2)
head(TableL2,30)
#names(TableL2)
#levels(TableL2$Complejo_racial)


#attach(TableL2)
#TableLJJ <- aggregate($Val1 ~ $Complejo_racial + $Estado , FUN = sum, na.rm = T)
#TableLJJF <- aggregate(Val1 ~ Complejo_racial + Raza_primaria, FUN = sum, na.rm = T)

#names(TableLJJ)[1] <- c("origin")
#names(TableLJJ)[2] <- c("visit")
#head(TableLJJF)
#names(TableLJJF)[2] <- c("origin")
#names(TableLJJF)[1] <- c("visit")

#detach(TableL2)
#Katcha <- rbind(TableLJJ,TableLJJF)


#str(Katcha)
#levels(Katcha$origin)
#levels(Katcha$visit)

#head(Katcha,90)

#Katcha[1:39,]
#tail(Katcha,11)
#levels(Katcha$origin)
#levels(Katcha$visit)

#Katcha$origin <- as.factor(as.numeric(Katcha$origin))
#Katcha$visit <- as.factor(as.numeric(Katcha$visit))
#Katcha1 <- Katcha[-c(11),]

#Note: Avoid cycles in your data: if A links to itself, or links to B which links to C which links to A, your chart will not render.

#plot(
#  gvisSankey(Katcha, from = "origin", to = "visit", weight = "Val1",
#                options = list(height = 250, width = 250,
#                               sankey = "{link:{color:{fill:'lighblue'}}}"
#                      #         sankey = "{
#                      #         link:{color:{fill: 'red', fillOpacity: 0.7}},
#                      #         node:{nodePadding: 5, label:{fontSize: 12}, interactivity: true, width: 20},
#                      #         }"
#                               )
#               )
#      )



#plot(gvisSankey(Katcha, from = "origin", to = "visit", weight = "Val1",
#                options = list(height = 750, width = 950,
#                               sankey = "{
#                               link:{color:{fill: 'red', fillOpacity: 0.7}},
#                               node:{nodePadding: 5, label:{fontSize: 12}, interactivity: true, width: 20},
#                               }")
#               )
#     )



#library(networkD3)

## Load energy projection data
## Load energy projection data
#URL <- paste0(
#  "https://cdn.rawgit.com/christophergandrud/networkD3/",
#  "master/JSONdata/energy.json")
#URL
#Energy <- jsonlite::fromJSON(URL)
#
#
## Plot
#sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
#              Target = "target", Value = "value", NodeID = "name",
#              units = "TWh", fontSize = 12, nodeWidth = 30)

```

```{r shinyserver, echo=FALSE}
### server.R

shinyServer(function(input, output) {
  
  
  #Para ventana 00
  
#  points2 <- reactive({
#    TableLH <- TableL1c[TableL1c$Raza_Primaria %in% input$Raza_Primaria,]
#  })
  
 # output$preImage1 <- renderImage({
    
  #  inorg1 <- input$Raza_Primaria
    ##TableLH <- TableL[TableL$Raza_primaria %in% input$Raza_primaria,]
  #  filename <- normalizePath(file.path('./www',
  #                                      paste(inorg1, '.jpg', sep = '')))
  #  #Return a list containing the filename and alt text
  #  list(src = filename,
  #       alt = paste("Raza de maíz", inorg1))
  #}, deleteFile = FALSE)
  
  
  
  #Ventana 1
  #### For the map in leaflet
  points <- reactive({
    #input$update
    #TableL <- TableL()
    if (input$Raza_primaria != "All") {
      TableL <- TableL[TableL$Raza_primaria %in% input$Raza_primaria,]
    }else TableL <- TableL
    
    if (input$Complejo_racial != "All") {
      TableL <- TableL[TableL$Complejo_racial %in% input$Complejo_racial,]
    }else TableL <- TableL
    
    if (input$Estado != "All") {
      TableL <- TableL[TableL$Estado %in% input$Estado,]
    }else TableL <- TableL
    
   # if (input$Periodo_Colecta != "All") {
      TableL <- TableL[TableL$Periodo_Colecta %in% input$Periodo_Colecta,]
    #}else TableL <- TableL
  })
  
  
  #Para la tabla en csv 
  output$downloadData <- downloadHandler(
    filename = function() { paste("Tabla", '.csv', sep = '') },
    content = function(file) {
      write.csv(points(), file)
    }
  )
  
  #P el mapa en leaflet
  output$mymap <- renderLeaflet({
    #TTT <- c(brewer.pal(8,"Dark2"),brewer.pal(10,"Paired"),brewer.pal(9,"Set1"),
    #         brewer.pal(10,"Set3"),brewer.pal(10,"Spectral"),brewer.pal(10,"PiYG"),brewer.pal(7,"BrBG"))
    TTT <- c(brewer.pal(8,"Dark2"))
    
    
    #DDD <- TTT[as.numeric(TableL$Raza_primaria)]
    #head(TableL$Raza_primaria)
    #head(DDD)
    #TTT <- colorNumeric(c(1:64), levels(TableL$Raza_primaria))
    Goldberg <- points()
    TT <- paste(Goldberg$Raza_primaria)
    leaflet(data = Goldberg) %>%
      clearShapes() %>%
      addTiles() %>%
      clearBounds() %>%  
      #addLayersControl(overlayGroups = c(TT),options = layersControlOptions(collapsed = T))%>%
      addCircleMarkers(Goldberg$longitude, Goldberg$latitude, 
                       weight = 8, radius = 4, stroke = F, fillOpacity = 0.9, color = sample(TTT,1),
                       clusterOptions = markerClusterOptions(showCoverageOnHover = T, 
                                                             spiderfyOnMaxZoom = T,
                                                             zoomToBoundsOnClick = T,
                                                             spiderfyDistanceMultiplier = 2), 
                       popup = paste(sep = " ","Complejo Racial:",Goldberg$Complejo_racial,"<br/>","Raza Maiz:",Goldberg$Raza_primaria,"<br/>", "Municipio:",Goldberg$Municipio, "<br/>","Localidad:",Goldberg$Localidad)) %>%
      addMeasure(primaryLengthUnit = "kilometers", primaryAreaUnit = "hectares",activeColor = '#FF00FF') %>%
      #addProviderTiles("Esri.WorldTopoMap")
      addProviderTiles("OpenStreetMap.DE")
  })
  
  ## display a palettes simultanoeusly
 
  
  #Para ventana 2 Imagenes y Grafico cleveland Plot
  
  points1 <- reactive({
      TableLH <- TableL1c[TableL1c$Raza_Primaria %in% input$Raza_Primaria,]
  })

  output$preImage <- renderImage({
    inorg <- input$Raza_Primaria
    TableLH <- TableL[TableL1c$Raza_Primaria %in% input$Raza_Primaria,]
    filename <- normalizePath(file.path('./www',
                              paste(inorg, '.jpg', sep = '')))
    #Return a list containing the filename and alt text
    list(src = filename,
         alt = paste("Raza de maíz", input$Raza_Primaria))
  }, deleteFile = FALSE)
  
  
  output$plot11 <- renderPlotly({
    #newData<-TablaVal
    newData <- points1()
    ### para la figura
    #names(newData)
    LL <- ggplot(newData, aes(x = Val1, y = reorder(Estado, Val1)), size = 0.2) +
      # use a larger dot
      geom_segment(aes(yend = Estado, xend = 0)) +
      # plot the n points and color them
      geom_point(size = 1, color = "red") +
      labs(title = "", x = "Frecuencia", y = "Estados")
      #theme_bw() +
      #coord_flip()
    LL <- LL + theme(axis.text.x = element_blank(),axis.ticks = element_blank(),
                     #panel.grid.minor. = element_blank(),
                     #panel.grid.major = element_line(colour = "black", linetype = "dotted"),
                     panel.grid.minor.x = element_blank(),
                     panel.grid.major.x = element_blank(),
                     axis.title = element_text(size = 14,face = "bold")) +
      theme(legend.title = element_blank())
    
    #LL
    #LL+geom_text(aes(label=newData$Mountain), 
    #                    color="gray20", size=1)
    gg <- ggplotly(LL)
    gg
    
  })

  #Ventana 2.1 Sankey Plot
  
  points2 <- reactive({
 
       #input$update
  #  if (input$Raza_primarias != "All") {
  #    TableL2 <- TableL2[TableL2$Raza_primaria %in% input$Raza_primarias,]
  #  }else TableL2 <- TableL2
    
  # if (input$Complejo_racials != "All") {
  #    TableL2 <- TableL2[TableL2$Complejo_racial %in% input$Complejo_racials,]
  #  }else TableL2 <- TableL2
    
    if (input$Estados != "All") {
      TableL2 <- TableL2[TableL2$Estado %in% input$Estados,]
    }else TableL2 <- TableL2
    
  })
  
  Richard1 <- reactive({
    TableL22 <- points2()
    
    attach(TableL22)
    TableLJJ <- aggregate(Val1 ~ Complejo_racial + Estado , FUN = sum, na.rm = T)
    TableLJJF <- aggregate(Val1 ~ Complejo_racial + Raza_primaria, FUN = sum, na.rm = T)
    
    #TableL1b <- aggregate(TableL1[,17], by = list(Raza_Primaria,Estado), FUN = sum, na.rm = T)
    head(TableLJJ)
    names(TableLJJ)[1] <- c("origin")
    names(TableLJJ)[2] <- c("visit")
    names(TableLJJ)[3] <- c("Val1")
    head(TableLJJF)
    names(TableLJJF)[2] <- c("origin")
    names(TableLJJF)[1] <- c("visit")
    names(TableLJJF)[3] <- c("Val1")
    detach(TableL22)
    
    Katcha <- rbind(TableLJJ,TableLJJF)
  })
  
  
  
  #P hacer la figura
  output$Sankeyplot1 <- renderGvis({
    
    Feynmann1 <- Richard1()
    
    LL34 <- gvisSankey(Feynmann1, from = "origin", to = "visit", weight = "Val1",
                       options = list(height = 950, width = 850,
                                      sankey = "{
                                      link:{color:{fill: 'red', fillOpacity: 0.9}},
                                      node:{nodePadding: 7, 
                                      label:{fontSize: 10}, 
                                      interactivity: true, width: 40},
                                                }"
                                      ), chartid = "Sankey"
                      )
    
    #output$sankeyplot <- renderGvis({ gvisSankey(sankeydata(), from = "source", to = "target",
    #                                            weight = "value", options = list( width = 1200, height = 600, 
    #                                        sankey = "{
    #                                        link: {color: { fill: 'grey100' } }, 
    #                                        node: { width: 40, color: { fill: '#a61d4c' },
    #                                        label: { fontName: 'Calibri', fontSize: 12, 
    #                                        color: '#871b47'} }}" ), chartid = "Sankey" )})
    
    #plot(LL34)
    return(LL34)
    
  })
  
  
  

  #Para Ventana 3 Para el mosaicplot
  points3 <- reactive({
    #maizemat<-maizemat[maizemat$Raza %in% input$Razas, ]
    TableLL1 <- TableLL[TableLL$Complejo_racial %in% input$Complejo_racials,]
    TableLL2 <- TableLL1[TableL$Periodo_Colecta %in% input$Periodo_Colectas,]
  })
  
  #Es un comprobador de resultados
  #output$TablaF <- renderTable(
  #  print(as.data.frame(Tabla4())))
  
  
  #Para el mosaicplot
  output$Plot12 <- renderPlot({
    #NewData <- Tabla4()
    NewData <- points3()
    attach(NewData)
    Tabla3 <- xtabs(Val1 ~ Estado + Raza_primaria)
    detach(NewData)
    Tabla4 <- Tabla3[apply(Tabla3,1,sum) > 0,apply(Tabla3,2,sum) > 0]
    #Tabla3 <- xtabs(NewData$Val1 ~ NewData$Raza_primaria + NewData$Complejo_racial)
    #Tabla4 <- Tabla3[apply(Tabla3,1,sum) > 0,apply(Tabla3,2,sum) > 0]    
        assoc(Tabla4, gp = shading_hsv, 
           labeling_args = list(rot_labels = c(left = 0, top = 45, bottom = 0,right = 0),
           abbreviate = c(variable = TRUE)), zero_size = 0, main = "")
    
    ####################
    
  })
  
  
})
```

```{r shinyui, echo=FALSE}

shinyUI(navbarPage(
  title = "Proyecto G Maíces",
# Ventana 0

#  tabPanel('Introducción',
#           absolutePanel(
             
#             imageOutput('preImage1', width = "100%", height = "100%"))),
             #top = 10, right = 10, width = 300,
              #           draggable = TRUE,
                         
                         #wellPanel(
                        #   column(9, imageOutput('preImage1')),
                        
               #          )
                #           )),
  
  
  #Ventana 1 Mapa
#tabPanel('Mapa', 
#         shinyUI(fluidPage(
#bootstrapPage(
#  #tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
#  leafletOutput("mymap", width = "100%", height = "100%"),
#  absolutePanel(top = 10, right = 10,
#                selectInput(inputId = "Raza_primaria",
#                            label = h6("Raza Primaria:"),
#                            c("All", levels(TableL$Raza_primaria))),
#                #c("All", unique(as.character(TableL$Raza_primaria)))),
#                
#                #Por Complejo Racial
#                selectInput(inputId = "Complejo_racial",
#                            label = h6("Grupo Racial:"),
#                            c("All", levels(TableL$Complejo_racial))),
#                
#                #Por Estado
#                selectInput(inputId = "Estado",
#                            label = h6("Estado:"),
#                            c("All", levels(TableL$Estado))),
#                
#                checkboxGroupInput("Periodo_Colecta", label = h6("Período de Colecta:"),
#                                   choice = levels(TableL$Periodo_Colecta), selected = levels(TableL$Periodo_Colecta))
#  )
#)
#))),



    tabPanel('Mapa', 
           # Define UI for slider demo application
           shinyUI(fluidPage(
             #Application title
             titlePanel("Proyecto Global de Maíces CONABIO"),
             h4("Razas de maíces"),
             
             sidebarLayout(
               sidebarPanel(
                 
                 #Raza Primaria
                 selectInput(inputId = "Raza_primaria",
                             label = h6("Raza Primaria:"),
                             c("All", levels(TableL$Raza_primaria))),
                 #c("All", unique(as.character(TableL$Raza_primaria)))),
                 
                 #Por Complejo Racial
                 selectInput(inputId = "Complejo_racial",
                             label = h6("Grupo Racial:"),
                             c("All", levels(TableL$Complejo_racial))),
                 
                 #Por Estado
                 selectInput(inputId = "Estado",
                             label = h6("Estado:"),
                             c("All", levels(TableL$Estado))),
                 
                 checkboxGroupInput("Periodo_Colecta", label = h6("Período de Colecta:"),
                                    choice = levels(TableL$Periodo_Colecta), selected = levels(TableL$Periodo_Colecta)),
                 
                 
                 h6("Descargar los datos seleccionados para la visualizados en el mapa"),
                 downloadButton('downloadData', 'Descargar (csv)'),
                 br(),
                 br(),
                 br(),
                 h6("Proyecto Global de Maíces"),
                 tags$a(href = "http://www.biodiversidad.gob.mx/genes/proyectoMaices.html", "Proyecto Maices"),
                 br(),
                 h6("Descarga de la base de datos"),
                 tags$a(href = "http://www.biodiversidad.gob.mx/genes/pdf/proyecto/Anexo13_Base%20de%20datos/BaseMaicesNativos.xlsx", "DataBase"),
                 br(),
                 h6("comentarios: aponce@conabio.gob.mx"),
                 br(),
                 h5("Github:"),
                 tags$a(href = "https://github.com/APonce73/Conabio-PGMaices", "Conabio-Maíces"),
                 width = 2),
               fluidRow(
                 column(9,leafletOutput("mymap", width = "1000", height = "800"))
               )
              #leafletOutput("mymap", width = "100%", height = "100%")
             )
           )) 
           ),
#Ventana 2 Fotos Maices
  tabPanel('Maíces',
           # Define UI for slider demo application
           shinyUI(fluidPage(
             #Application title
             titlePanel("Proyecto Global de Maíces CONABIO"),
             h4("Razas de maíces"),
             
             sidebarLayout(
               sidebarPanel(
                 
                 
                 #Raza Primaria
                 selectInput(inputId = "Raza_Primaria",
                             label = h6("Raza de maíz:"),
                             levels(TableL1c$Raza_Primaria)),
                 h6("Proyecto Global de Maíces"),
                 tags$a(href = "http://www.biodiversidad.gob.mx/genes/proyectoMaices.html", "Proyecto Maices"),
                 br(),
                 h6("Descarga de la base de datos"),
                 tags$a(href = "http://www.biodiversidad.gob.mx/genes/pdf/proyecto/Anexo13_Base%20de%20datos/BaseMaicesNativos.xlsx", "DataBase"),
                 br(),
                 h6("comentarios: aponce@conabio.gob.mx"),
                 br(),
                 h5("Github:"),
                 tags$a(href = "https://github.com/APonce73/Conabio-PGMaices", "Conabio-Maíces"),
                 width = 2),
               fluidRow(
                 column(9, imageOutput('preImage', height = 500, width = 500)),
                 column(8,plotlyOutput("plot11", height = 700, width = 900))
                 
                        
               )
             )
               ))
           ),

#Ventana 2.1 Sankeyplot

tabPanel('Sankey', 
         # Define UI for slider demo application
         shinyUI(fluidPage(
           #Application title
           titlePanel("Gráfica de Sankey"),
           h4("Razas de maíces"),
           
           sidebarLayout(
             sidebarPanel(
               
               #Raza Primaria
            #   selectInput(inputId = "Raza_primarias",
            #               label = h6("Raza Primaria:"),
            #               c("All", levels(TableL2$Raza_primaria))),
            #   #c("All", unique(as.character(TableL$Raza_primaria)))),
               
            #   #Por Complejo Racial
            #   selectInput(inputId = "Complejo_racials",
            #               label = h6("Grupo Racial:"),
            #               c("All", levels(TableL2$Complejo_racial))),
               
               #Por Estado
               selectInput(inputId = "Estados",
                           label = h6("Estado:"),
                            c("All", levels(TableL2$Estado))),
               br(),
               h6("Visualización de la presencia de maíces en distintos estados"),
               br()
               
              # selectInput(inputId = "Complejo_racials",
              #             label = h6("Grupo racial:"),
              #             levels(TableLL$Complejo_racial)),
               
               
               
             , width = 2),    
                column(9,
               htmlOutput("Sankeyplot1", width = "1000", height = "600")
             )
             #leafletOutput("mymap", width = "100%", height = "100%")
           
         )
         ))
),


#Ventana 3  StrucPlot         
  tabPanel('Análisis',
           # Define UI for slider demo application
           shinyUI(fluidPage(
             #Application title
             titlePanel("Strucplot"),
             h4("Razas de maíces"),
             
             sidebarLayout(
               sidebarPanel(
                 
                 #Por Complejo Racial
                # selectInput(inputId = "Complejo_racial",
                #             label = h6("Complejo Racial:"),
                #             levels(TableL$Complejo_racial)),
                 
                 #Por Estado
                 selectInput(inputId = "Complejo_racials",
                             label = h6("Grupo racial:"),
                             levels(TableLL$Complejo_racial)),
                 
                 checkboxGroupInput("Periodo_Colectas", label = h6("Período de Colecta:"),
                                    choice = levels(TableLL$Periodo_Colecta), selected = levels(TableLL$Periodo_Colecta)),
                 h6("Strucplot es una gráfica de asociación entre los Estados y las razas de 
                      maíces presentes en cada grupo racial durante todos los períodos de colecta"),
                 #tags$a(href = "http://www.biodiversidad.gob.mx/genes/proyectoMaices.html", "Proyecto Maices"),
                 #br(),
                 #h6("Descarga de la base de datos"),
                 #tags$a(href = "http://www.biodiversidad.gob.mx/genes/pdf/proyecto/Anexo13_Base%20de%20datos/BaseMaicesNativos.xlsx", "DataBase"),
                 #br(),
                 #h6("comentarios: aponce@conabio.gob.mx"),
                 #br(),
                 #h5("Github:"),
                 #tags$a(href = "https://github.com/APonce73/Conabio-PGMaices", "Conabio-Maíces"),
                 width = 2),
               
               fluidRow(
                   column(7,
                          plotOutput('Plot12', height = 700, width = 900)
                          #tableOutput('TablaF')
                          )
               )
             ))
           )
           )
  ))



#library(devtools)
#install_github("mages/googleVis")
```

```{r}
summary(cars)
```

Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```




```{r, echo = FALSE}
# https://stackoverflow.com/questions/31221981/how-do-i-add-citations-and-a-bibliography-to-rpres-rmarkdown-presentations
library(knitcitations)
```

See the `knitcitations` vignette for details on how to add citations, such as
`r citep("10.1890/11-0011.1")`

Bibliography
========================================================

Use the `bibliography` function to add the bibliography.

```{r, echo=FALSE, results="asis"}
bibliography()
```